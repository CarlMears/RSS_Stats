[{"fullname": "map_stats", "modulename": "map_stats", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "map_stats.map_stats", "modulename": "map_stats.map_stats", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "map_stats.map_stats.MapStat", "modulename": "map_stats.map_stats", "qualname": "MapStat", "type": "class", "doc": "<h1 id=\"overview\">Overview</h1>\n\n<p>Class for accumulating and reporting map statistics. <br />\nMaps are assumed to be on a regular lat/lon grids, with ilat=0 corresponding to the southernmost point. <br />\nEach map contains maps of the number of observations, the total of the observations, and the total square of the observations.\nThis is to make it easy to combined maps, e.g. combine daily maps into a monthly average.  </p>\n\n<h1 id=\"args\">Args:</h1>\n\n<ul>\n<li>num_lats:   number of latitide grid cells  </li>\n<li>num_lons:   number of longitude grid cells  </li>\n<li>min_lat:    minimum latitude  </li>\n<li>max_lat:    maximum latitude  </li>\n<li>min_lon:    minimum longitude  </li>\n<li>max_lon:    maximum longitude  </li>\n</ul>\n\n<h1 id=\"internal-representation\">Internal Representation:</h1>\n\n<ul>\n<li>self.num numpy array, number of observations in grid cell  </li>\n<li>self.tot numpy array, total of observations in grid cell</li>\n<li>self.tot_sqr numpy array, total square of observations in grid cell</li>\n</ul>\n"}, {"fullname": "map_stats.map_stats.MapStat.__init__", "modulename": "map_stats.map_stats", "qualname": "MapStat.__init__", "type": "function", "doc": "<p>Initialize MapStat Object</p>\n", "parameters": ["self", "num_lats", "num_lons", "min_lat", "max_lat", "min_lon", "max_lon"], "funcdef": "def"}, {"fullname": "map_stats.map_stats.MapStat.num", "modulename": "map_stats.map_stats", "qualname": "MapStat.num", "type": "variable", "doc": "<p>number of observations in grid cell</p>\n"}, {"fullname": "map_stats.map_stats.MapStat.tot", "modulename": "map_stats.map_stats", "qualname": "MapStat.tot", "type": "variable", "doc": "<p>total of observations in grid cell</p>\n"}, {"fullname": "map_stats.map_stats.MapStat.totsqr", "modulename": "map_stats.map_stats", "qualname": "MapStat.totsqr", "type": "variable", "doc": "<p>total of squared observations in grid cell</p>\n"}, {"fullname": "map_stats.map_stats.MapStat.from_np_triple", "modulename": "map_stats.map_stats", "qualname": "MapStat.from_np_triple", "type": "function", "doc": "<p>Initilzes MapStat from 3 numpy 2D arrays (n,tot,totsqr)</p>\n", "parameters": ["n", "tot", "totsqr", "num_lats", "num_lons", "min_lat", "max_lat", "min_lon", "max_lon"], "funcdef": "def"}, {"fullname": "map_stats.map_stats.MapStat.from_netcdf_triple", "modulename": "map_stats.map_stats", "qualname": "MapStat.from_netcdf_triple", "type": "function", "doc": "<p>Opens a netcdf file and reads U, V, and W maps, each with total and tot_sqr data.\nU data must be named u_tot and u_tot_sqr in the file\nV data must be named v_tot and v_tot_sqr\nW data must be named w_tot and w_tot_sqr</p>\n\n<p>If any data is missing, the corresponding MapStat object is returned empty</p>\n\n<p>Unless speed_only is set True -- in this case, only the W variables are loaded</p>\n", "parameters": ["nc_file", "speed_only"], "funcdef": "def"}, {"fullname": "map_stats.map_stats.MapStat.compatible", "modulename": "map_stats.map_stats", "qualname": "MapStat.compatible", "type": "function", "doc": "<p>Checks to make sure that 2 MapStat objects are compatible, usually called before combining\ntwo maps are combined</p>\n", "parameters": ["self", "self2"], "funcdef": "def"}, {"fullname": "map_stats.map_stats.MapStat.combine", "modulename": "map_stats.map_stats", "qualname": "MapStat.combine", "type": "function", "doc": "<p>Combine the data in two MapStat objects</p>\n", "parameters": ["self", "self2"], "funcdef": "def"}, {"fullname": "map_stats.map_stats.MapStat.add_data", "modulename": "map_stats.map_stats", "qualname": "MapStat.add_data", "type": "function", "doc": "<p>Adds data from numpy arrays of lats,lons and values to the map</p>\n", "parameters": ["self", "lats", "lons", "values"], "funcdef": "def"}, {"fullname": "map_stats.map_stats.MapStat.add_map", "modulename": "map_stats.map_stats", "qualname": "MapStat.add_map", "type": "function", "doc": "<p>Add data from a lat/lon array of values -- assume that num is 1 for the map to be added</p>\n", "parameters": ["self", "map"], "funcdef": "def"}, {"fullname": "map_stats.map_stats.MapStat.num_obs", "modulename": "map_stats.map_stats", "qualname": "MapStat.num_obs", "type": "function", "doc": "<p>Return the num map as a numpy array</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "map_stats.map_stats.MapStat.mean", "modulename": "map_stats.map_stats", "qualname": "MapStat.mean", "type": "function", "doc": "<p>Return a map of mean values</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "map_stats.map_stats.MapStat.variance", "modulename": "map_stats.map_stats", "qualname": "MapStat.variance", "type": "function", "doc": "<p>Return a map of variances</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "map_stats.map_stats.MapStat.stddev", "modulename": "map_stats.map_stats", "qualname": "MapStat.stddev", "type": "function", "doc": "<p>Return a map of standard deviations</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "map_stats.map_stats.MapStat.zonal_sum", "modulename": "map_stats.map_stats", "qualname": "MapStat.zonal_sum", "type": "function", "doc": "<p>Return a zonal sum</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "map_stats.map_stats.MapStat.zonal_num_good_pix", "modulename": "map_stats.map_stats", "qualname": "MapStat.zonal_num_good_pix", "type": "function", "doc": "<p>Return zonal sum of good pix</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "map_stats.map_stats.MapStat.zonal_mean", "modulename": "map_stats.map_stats", "qualname": "MapStat.zonal_mean", "type": "function", "doc": "<p>Return zonal mean</p>\n", "parameters": ["self", "min_good_pix"], "funcdef": "def"}, {"fullname": "map_stats.map_stats.MapStat.zonal_variance", "modulename": "map_stats.map_stats", "qualname": "MapStat.zonal_variance", "type": "function", "doc": "<p>Return zonal variance</p>\n", "parameters": ["self", "min_good_pix"], "funcdef": "def"}, {"fullname": "map_stats.map_stats.MapStat.zonal_stddev", "modulename": "map_stats.map_stats", "qualname": "MapStat.zonal_stddev", "type": "function", "doc": "<p>Return zonal standard deviation</p>\n", "parameters": ["self", "min_good_pix"], "funcdef": "def"}, {"fullname": "map_stats.map_stats.MapStat.as_xr", "modulename": "map_stats.map_stats", "qualname": "MapStat.as_xr", "type": "function", "doc": "<p>Returns MapStat objects as an xarray</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "map_stats.polar_map_stats", "modulename": "map_stats.polar_map_stats", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "map_stats.polar_map_stats.PolarMapStat", "modulename": "map_stats.polar_map_stats", "qualname": "PolarMapStat", "type": "class", "doc": "<h1 id=\"overview\">Overview</h1>\n\n<p>Class for accumulating and reporting map statistics on a polar stereographic grid. <br />\nMaps are assumed to be on a 25 km polarstereographic grid, as defined by NSIDC for each pole. <br />\nThe number of grid cells is determined by the pole being represented.</p>\n\n<p>Each map contains maps of the number of observations, the total of the observations, and the total square of the observations. <br />\nThis is to make it easy to combined maps, e.g. combine daily maps into a monthly average.  </p>\n\n<p>There is also an option to have the map refer to a discontinuous \"ice type\" variable.  </p>\n\n<p>Unlike the rectangular MapStat class, the data here is represented as an xarray.  </p>\n\n<h1 id=\"to-do\">To Do</h1>\n\n<ul>\n<li>Add write methods</li>\n<li>Add type_map to compatiblity method</li>\n</ul>\n\n<h1 id=\"arguments\">Arguments:</h1>\n\n<ul>\n<li>pole:  pole to represent - 'north' or 'south'  </li>\n<li>type_map:  set to True is the map is of ice_type</li>\n</ul>\n"}, {"fullname": "map_stats.polar_map_stats.PolarMapStat.__init__", "modulename": "map_stats.polar_map_stats", "qualname": "PolarMapStat.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "pole", "type_map"], "funcdef": "def"}, {"fullname": "map_stats.polar_map_stats.PolarMapStat.pole", "modulename": "map_stats.polar_map_stats", "qualname": "PolarMapStat.pole", "type": "variable", "doc": "<p>Pole represented - \"north\" or \"south\"</p>\n"}, {"fullname": "map_stats.polar_map_stats.PolarMapStat.type_map", "modulename": "map_stats.polar_map_stats", "qualname": "PolarMapStat.type_map", "type": "variable", "doc": "<p>Set to True is a ice type map</p>\n"}, {"fullname": "map_stats.polar_map_stats.PolarMapStat.add_map", "modulename": "map_stats.polar_map_stats", "qualname": "PolarMapStat.add_map", "type": "function", "doc": "<p>Add data in a 2D polar map to the object, assuming each grid cell has 1 observation</p>\n", "parameters": ["self", "map_name", "dtype"], "funcdef": "def"}, {"fullname": "map_stats.polar_map_stats.PolarMapStat.add_data_to_map_lat_lon", "modulename": "map_stats.polar_map_stats", "qualname": "PolarMapStat.add_data_to_map_lat_lon", "type": "function", "doc": "<p>Add data to map from a np arrays of values, latitudes and longitudes <br />\nIf percent_land is presents, only add data where percent land is &lt; land_threshold</p>\n", "parameters": ["self", "map_name", "values", "lat", "lon", "percent_land", "land_thres", "pole"], "funcdef": "def"}, {"fullname": "map_stats.polar_map_stats.PolarMapStat.add_data_to_map", "modulename": "map_stats.polar_map_stats", "qualname": "PolarMapStat.add_data_to_map", "type": "function", "doc": "<p>Add data to map from a np arrays of values, x and y locations <br />\nix and iy should already be converted to integer cell positions <br />\nIf percent_land is presents, only add data where percent land is &lt; land_threshold</p>\n", "parameters": ["self", "map_name", "values", "ix", "iy", "percent_land", "land_thres"], "funcdef": "def"}, {"fullname": "map_stats.polar_map_stats.PolarMapStat.add_type_data_to_map", "modulename": "map_stats.polar_map_stats", "qualname": "PolarMapStat.add_type_data_to_map", "type": "function", "doc": "<p>Add data to map from a np arrays of ice types, latitudes and longitudes <br />\nIf percent_land is presents, only add data where percent land is &lt; land_threshold</p>\n", "parameters": ["self", "map_name", "values", "ix", "iy", "percent_land", "land_thres"], "funcdef": "def"}, {"fullname": "map_stats.polar_map_stats.PolarMapStat.compatible", "modulename": "map_stats.polar_map_stats", "qualname": "PolarMapStat.compatible", "type": "function", "doc": "<p>Check to see if maps are compatible <br />\nOften called before combining</p>\n", "parameters": ["self", "self2"], "funcdef": "def"}, {"fullname": "map_stats.polar_map_stats.PolarMapStat.combine", "modulename": "map_stats.polar_map_stats", "qualname": "PolarMapStat.combine", "type": "function", "doc": "<p>Combine data from second PolarMapStat object into self</p>\n", "parameters": ["self", "self2", "verbose"], "funcdef": "def"}, {"fullname": "map_stats.polar_map_stats.PolarMapStat.num_obs", "modulename": "map_stats.polar_map_stats", "qualname": "PolarMapStat.num_obs", "type": "function", "doc": "<p>Return map of number of observations</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "map_stats.polar_map_stats.PolarMapStat.mean", "modulename": "map_stats.polar_map_stats", "qualname": "PolarMapStat.mean", "type": "function", "doc": "<p>Return mean map</p>\n", "parameters": ["self", "map_name"], "funcdef": "def"}, {"fullname": "map_stats.polar_map_stats.PolarMapStat.plot", "modulename": "map_stats.polar_map_stats", "qualname": "PolarMapStat.plot", "type": "function", "doc": "<p>Plot polar map using matplotlib/cartopy</p>\n", "parameters": ["self", "map_name", "zrange", "stat", "title", "units", "coast_color", "cmap"], "funcdef": "def"}, {"fullname": "map_stats.rss_maps", "modulename": "map_stats.rss_maps", "qualname": "", "type": "module", "doc": "<h1 id=\"overview\">Overview</h1>\n\n<p>Helper functions to compuse simple stats from numpy arrays representing maps. <br />\nThese functions are deprecated</p>\n\n<h1 id=\"to-do\">To do</h1>\n\n<ul>\n<li>Remove these from current code and replace with MapStats instances where needed</li>\n</ul>\n"}, {"fullname": "map_stats.rss_maps.zonal_mean", "modulename": "map_stats.rss_maps", "qualname": "zonal_mean", "type": "function", "doc": "<p></p>\n", "parameters": ["map", "num_thres"], "funcdef": "def"}, {"fullname": "map_stats.rss_maps.global_mean", "modulename": "map_stats.rss_maps", "qualname": "global_mean", "type": "function", "doc": "<p></p>\n", "parameters": ["map"], "funcdef": "def"}]